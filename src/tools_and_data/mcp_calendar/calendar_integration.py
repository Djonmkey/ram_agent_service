"""calendar_integration.py
=========================

Helper utilities for creating calendar events for David McKee’s RAM Agent
Service.

Features
--------
* Build RFC-5545–compliant VEVENT strings.
* Push events to Apple iCloud Calendar via CalDAV.
* Optionally write a standalone “.ics” file for manual import
  (e.g. Google Calendar when API issues occur).

Requirements
------------
pip install caldav python-dateutil requests

Environment Variables
---------------------
ICLOUD_CALDAV_URL   – Base CalDAV URL, e.g.
                      https://caldav.icloud.com/<principal_id>/calendars/Personal/
ICLOUD_USER         – iCloud email / Apple ID
ICLOUD_APP_PASSWORD – app-specific password (16 chars)

Example
-------
>>> from datetime import datetime, timedelta, timezone
>>> # Import directly when using as a module
>>> from src.tools_and_data.mcp_calendar.calendar_integration import create_and_push_event
>>> # Or use the local functions when running the file directly
>>> # from calendar_integration import create_and_push_event  # Only when imported as a module
>>> uid, _ = create_and_push_event(
...     summary="Weekly Planning & Retro",
...     description="Auto-generated by RAM Agent Service.",
...     dt_start=datetime(2025, 5, 16, 15, 0, tzinfo=timezone.utc),
...     duration=timedelta(hours=2)
... )
>>> print(uid)
'E9F8A2…'
"""

from __future__ import annotations

import os
import uuid
from datetime import datetime, timedelta, timezone
from pathlib import Path
from typing import Final, Optional

import requests  # for low-level CalDAV PUT
from caldav import DAVClient  # optional – not needed for simple PUT


__all__: Final = [
    "build_vevent",
    "push_event_to_icloud",
    "write_ics_file",
    "create_and_push_event",
]


# ---------------------------------------------------------------------------
# VEVENT builder
# ---------------------------------------------------------------------------

def build_vevent(
    summary: str,
    description: str,
    dt_start: datetime,
    duration: timedelta,
    uid: Optional[str] = None,
) -> str:
    """Return a raw VEVENT component.

    Parameters
    ----------
    summary
        Event title shown in the calendar UI.
    description
        Long-form description.
    dt_start
        Event start time (timezone-aware datetime).
    duration
        Total event length.
    uid
        Unique identifier (generated if *None*).

    Returns
    -------
    str
        The VEVENT component *without* the surrounding VCALENDAR wrapper.
    """
    if dt_start.tzinfo is None:
        raise ValueError("dt_start must be timezone-aware")

    uid = uid or uuid.uuid4().hex.upper()
    dtstamp = datetime.now(timezone.utc).strftime("%Y%m%dT%H%M%SZ")
    dtstart = dt_start.astimezone(timezone.utc).strftime("%Y%m%dT%H%M%SZ")

    total_seconds = int(duration.total_seconds())
    hours, remainder = divmod(total_seconds, 3600)
    minutes = remainder // 60
    dur_iso = f"PT{hours}H{minutes}M"

    vevent = (
        "BEGIN:VEVENT\r\n"
        f"UID:{uid}\r\n"
        f"DTSTAMP:{dtstamp}\r\n"
        f"DTSTART:{dtstart}\r\n"
        f"DURATION:{dur_iso}\r\n"
        f"SUMMARY:{summary}\r\n"
        f"DESCRIPTION:{description}\r\n"
        "END:VEVENT\r\n"
    )
    return vevent


# ---------------------------------------------------------------------------
# CalDAV push + fallback ICS
# ---------------------------------------------------------------------------

def push_event_to_icloud(
    vevent: str,
    calendar_url: str,
    username: str,
    app_password: str,
) -> str:
    """PUT the VEVENT to iCloud via CalDAV. Returns the UID on success."""
    vcal = "BEGIN:VCALENDAR\r\nVERSION:2.0\r\n" + vevent + "END:VCALENDAR\r\n"
    uid = [l for l in vevent.splitlines() if l.startswith("UID:")][0].split(":", 1)[1]
    resource_url = calendar_url.rstrip("/") + f"/{uid}.ics"

    resp = requests.put(
        resource_url,
        data=vcal.encode(),
        headers={"Content-Type": "text/calendar"},
        auth=(username, app_password),
        timeout=30,
    )
    if resp.status_code not in (200, 201, 204):
        raise RuntimeError(f"CalDAV PUT failed {resp.status_code}: {resp.text[:200]}")
    return uid


def write_ics_file(vevent: str, output_path: Path) -> Path:
    """Write a standalone .ics file (wrapped in VCALENDAR) and return the path."""
    vcal = "BEGIN:VCALENDAR\r\nVERSION:2.0\r\n" + vevent + "END:VCALENDAR\r\n"
    output_path.write_text(vcal, encoding="utf-8")
    return output_path


def create_and_push_event(
    summary: str,
    description: str,
    dt_start: datetime,
    duration: timedelta,
    *,
    calendar_url: str | None = None,
    username: str | None = None,
    app_password: str | None = None,
    fallback_dir: Path | str = "~/Downloads",
) -> tuple[str, Path | None]:
    """Build VEVENT → attempt CalDAV PUT → fallback to .ics file.

    Returns
    -------
    (uid, ics_path)
        *ics_path* is *None* when CalDAV succeeded.
    """
    vevent = build_vevent(summary, description, dt_start, duration)

    calendar_url = calendar_url or os.getenv("ICLOUD_CALDAV_URL")
    username = username or os.getenv("ICLOUD_USER")
    app_password = app_password or os.getenv("ICLOUD_APP_PASSWORD")

    if not all([calendar_url, username, app_password]):
        raise ValueError("Missing CalDAV credentials (env vars).")

    try:
        uid = push_event_to_icloud(vevent, calendar_url, username, app_password)
        return uid, None
    except Exception as exc:  # noqa: BLE001
        # Fallback: write .ics file
        uid = [l for l in vevent.splitlines() if l.startswith("UID:")][0].split(":", 1)[1]
        ics_path = Path(fallback_dir).expanduser() / f"{uid}.ics"
        write_ics_file(vevent, ics_path)
        return uid, ics_path
